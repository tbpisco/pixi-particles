{"version":3,"file":"pixi-particles.js","sources":["../src/PropertyNode.ts","../src/ParticleUtils.ts","../src/PropertyList.ts","../src/Particle.ts","../src/PolygonalChain.ts","../src/Emitter.ts","../src/PathParticle.ts","../src/AnimatedParticle.ts"],"sourcesContent":["import {ParticleUtils, EaseSegment, SimpleEase, Color} from \"./ParticleUtils\";\r\nimport {BasicTweenable} from \"./EmitterConfig\";\r\n\r\nexport interface ValueStep<T> {\r\n\tvalue:T;\r\n\ttime:number;\r\n}\r\n\r\nexport interface ValueList<T> {\r\n\tlist: ValueStep<T>[],\r\n\tisStepped?: boolean;\r\n\tease?: SimpleEase|EaseSegment[];\r\n}\r\n/**\r\n * A single node in a PropertyList.\r\n */\r\nexport class PropertyNode<V>\r\n{\r\n\t/**\r\n\t * Value for the node.\r\n\t */\r\n\tpublic value: V;\r\n\t/**\r\n\t * Time value for the node. Between 0-1.\r\n\t */\r\n\tpublic time: number;\r\n\t/**\r\n\t * The next node in line.\r\n\t */\r\n\tpublic next: PropertyNode<V>;\r\n\t/**\r\n\t * If this is the first node in the list, controls if the entire list is stepped or not.\r\n\t */\r\n\tpublic isStepped: boolean;\r\n\tpublic ease: SimpleEase;\r\n\t\r\n\t/**\r\n\t * @param value The value for this node\r\n\t * @param time The time for this node, between 0-1\r\n\t * @param [ease] Custom ease for this list. Only relevant for the first node.\r\n\t */\r\n\tconstructor(value: V, time:number, ease?: SimpleEase|EaseSegment[])\r\n\t{\r\n\t\tthis.value = value;\r\n\t\tthis.time = time;\r\n\t\tthis.next = null;\r\n\t\tthis.isStepped = false;\r\n\t\tif (ease)\r\n\t\t{\r\n\t\t\tthis.ease = typeof ease == \"function\" ? ease : ParticleUtils.generateEase(ease);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.ease = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of property values from a data object {list, isStepped} with a list of objects in\r\n\t * the form {value, time}. Alternatively, the data object can be in the deprecated form of\r\n\t * {start, end}.\r\n\t * @param data The data for the list.\r\n\t * @param data.list The array of value and time objects.\r\n\t * @param data.isStepped If the list is stepped rather than interpolated.\r\n\t * @param data.ease Custom ease for this list.\r\n\t * @return The first node in the list\r\n\t */\r\n\tpublic static createList<T extends (string|number)>(data: ValueList<T>|BasicTweenable<T>):PropertyNode<T extends string ? Color : T>\r\n\t{\r\n\t\tif (\"list\" in data)\r\n\t\t{\r\n\t\t\tlet array = data.list;\r\n\t\t\tlet node, first;\r\n\t\t\tconst {value, time} = array[0];\r\n\t\t\tfirst = node = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time, data.ease);\r\n\t\t\t//only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\r\n\t\t\tif (array.length > 2 || (array.length === 2 && array[1].value !== value))\r\n\t\t\t{\r\n\t\t\t\tfor (let i = 1; i < array.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst {value, time} = array[i];\r\n\t\t\t\t\tnode.next = new PropertyNode(typeof value === 'string' ? ParticleUtils.hexToRGB(value) : value, time);\r\n\t\t\t\t\tnode = node.next;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfirst.isStepped = !!data.isStepped;\r\n\t\t\treturn first as PropertyNode<T extends string ? Color : T>;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t//Handle deprecated version here\r\n\t\t\tlet start = new PropertyNode(typeof data.start === 'string' ? ParticleUtils.hexToRGB(data.start) : data.start, 0);\r\n\t\t\t//only set up a next value if it is different from the starting value\r\n\t\t\tif (data.end !== data.start)\r\n\t\t\t\tstart.next = new PropertyNode(typeof data.end === 'string' ? ParticleUtils.hexToRGB(data.end) : data.end, 1);\r\n\t\t\treturn start as PropertyNode<T extends string ? Color : T>;\r\n\t\t}\r\n\t}\r\n}","import {BLEND_MODES, Point} from 'pixi.js-legacy';\r\nimport {PropertyNode, ValueStep} from './PropertyNode';\r\n\r\nexport interface Color {\r\n\tr: number,\r\n\tg: number,\r\n\tb: number,\r\n\ta?: number\r\n}\r\n\r\nexport interface EaseSegment {\r\n\tcp:number;\r\n\ts:number;\r\n\te:number;\r\n}\r\n\r\nexport type SimpleEase = (time:number) => number;\r\n\r\n/**\r\n * Contains helper functions for particles and emitters to use.\r\n */\r\nexport namespace ParticleUtils {\r\n\t/**\r\n\t * If errors and warnings should be logged within the library.\r\n\t */\r\n\texport let verbose = false;\r\n\r\n\texport const DEG_TO_RADS = Math.PI / 180;\r\n\r\n\t/**\r\n\t * Rotates a point by a given angle.\r\n\t * @param angle The angle to rotate by in degrees\r\n\t * @param p The point to rotate around 0,0.\r\n\t */\r\n\texport function rotatePoint(angle:number, p:Point)\r\n\t{\r\n\t\tif (!angle) return;\r\n\t\tangle *= ParticleUtils.DEG_TO_RADS;\r\n\t\tconst s = Math.sin(angle);\r\n\t\tconst c = Math.cos(angle);\r\n\t\tconst xnew = p.x * c - p.y * s;\r\n\t\tconst ynew = p.x * s + p.y * c;\r\n\t\tp.x = xnew;\r\n\t\tp.y = ynew;\r\n\t}\r\n\r\n\t/**\r\n\t * Combines separate color components (0-255) into a single uint color.\r\n\t * @param r The red value of the color\r\n\t * @param g The green value of the color\r\n\t * @param b The blue value of the color\r\n\t * @return The color in the form of 0xRRGGBB\r\n\t */\r\n\texport function combineRGBComponents(r:number, g:number, b:number/*, a*/): number\r\n\t{\r\n\t\treturn /*a << 24 |*/ r << 16 | g << 8 | b;\r\n\t}\r\n\r\n\t/**\r\n\t * Reduces the point to a length of 1.\r\n\t * @param point The point to normalize\r\n\t */\r\n\texport function normalize(point:Point): void\r\n\t{\r\n\t\tlet oneOverLen = 1 / ParticleUtils.length(point);\r\n\t\tpoint.x *= oneOverLen;\r\n\t\tpoint.y *= oneOverLen;\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the x and y values of this point by a value.\r\n\t * @param point The point to scaleBy\r\n\t * @param value The value to scale by.\r\n\t */\r\n\texport function scaleBy(point:Point, value:number): void\r\n\t{\r\n\t\tpoint.x *= value;\r\n\t\tpoint.y *= value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the length (or magnitude) of this point.\r\n\t * @param point The point to measure length\r\n\t * @return The length of this point.\r\n\t */\r\n\texport function length(point:Point): number\r\n\t{\r\n\t\treturn Math.sqrt(point.x * point.x + point.y * point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\r\n\t * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\r\n\t * {r, g, b, (a)}.\r\n\t * @param color The input color string.\r\n\t * @param output An object to put the output in. If omitted, a new object is created.\r\n\t * @return The object with r, g, and b properties, possibly with an a property.\r\n\t */\r\n\texport function hexToRGB(color:string, output?:Color): Color\r\n\t{\r\n\t\tif (!output)\r\n\t\t\toutput = {} as Color;\r\n\t\tif (color.charAt(0) == \"#\")\r\n\t\t\tcolor = color.substr(1);\r\n\t\telse if (color.indexOf(\"0x\") === 0)\r\n\t\t\tcolor = color.substr(2);\r\n\t\tlet alpha;\r\n\t\tif (color.length == 8)\r\n\t\t{\r\n\t\t\talpha = color.substr(0, 2);\r\n\t\t\tcolor = color.substr(2);\r\n\t\t}\r\n\t\toutput.r = parseInt(color.substr(0, 2), 16);//Red\r\n\t\toutput.g = parseInt(color.substr(2, 2), 16);//Green\r\n\t\toutput.b = parseInt(color.substr(4, 2), 16);//Blue\r\n\t\tif (alpha)\r\n\t\t\toutput.a = parseInt(alpha, 16);\r\n\t\treturn output;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\r\n\t * by the related tool at http://www.greensock.com/customease/.\r\n\t * @param segments An array of segments, as created by\r\n\t * http://www.greensock.com/customease/.\r\n\t * @return A function that calculates the percentage of change at\r\n\t *                    a given point in time (0-1 inclusive).\r\n\t */\r\n\texport function generateEase(segments:EaseSegment[]): SimpleEase\r\n\t{\r\n\t\tconst qty = segments.length;\r\n\t\tconst oneOverQty = 1 / qty;\r\n\t\t/*\r\n\t\t * Calculates the percentage of change at a given point in time (0-1 inclusive).\r\n\t\t * @param {Number} time The time of the ease, 0-1 inclusive.\r\n\t\t * @return {Number} The percentage of the change, 0-1 inclusive (unless your\r\n\t\t *                  ease goes outside those bounds).\r\n\t\t */\r\n\t\treturn function(time:number)\r\n\t\t{\r\n\t\t\tlet t: number, s: EaseSegment;\r\n\t\t\tlet i = (qty * time) | 0;//do a quick floor operation\r\n\t\t\tt = (time - (i * oneOverQty)) * qty;\r\n\t\t\ts = segments[i] || segments[qty - 1];\r\n\t\t\treturn (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a blend mode, ensuring that it is valid.\r\n\t * @param name The name of the blend mode to get.\r\n\t * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\r\n\t */\r\n\texport function getBlendMode(name:string): number\r\n\t{\r\n\t\tif (!name) return BLEND_MODES.NORMAL;\r\n\t\tname = name.toUpperCase();\r\n\t\twhile (name.indexOf(\" \") >= 0)\r\n\t\t\tname = name.replace(\" \", \"_\");\r\n\t\treturn (BLEND_MODES as any)[name] || BLEND_MODES.NORMAL;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\r\n\t * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\r\n\t * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\r\n\t * @param list The list of data to convert.\r\n\t * @param [numSteps=10] The number of steps to use.\r\n\t * @return The blend mode as specified in the PIXI.blendModes enumeration.\r\n\t */\r\n\texport function createSteppedGradient(list:ValueStep<string>[], numSteps:number = 10) {\r\n\t\tif (typeof numSteps !== 'number' || numSteps <= 0)\r\n\t\t\tnumSteps = 10;\r\n\t\tlet first = new PropertyNode<Color>(ParticleUtils.hexToRGB(list[0].value), list[0].time);\r\n\t\tfirst.isStepped = true;\r\n\t\tlet currentNode = first;\r\n\t\tlet current = list[0];\r\n\t\tlet nextIndex = 1;\r\n\t\tlet next = list[nextIndex];\r\n\t\tfor (let i = 1; i < numSteps; ++i)\r\n\t\t{\r\n\t\t\tlet lerp = i / numSteps;\r\n\t\t\t//ensure we are on the right segment, if multiple\r\n\t\t\twhile (lerp > next.time)\r\n\t\t\t{\r\n\t\t\t\tcurrent = next;\r\n\t\t\t\tnext = list[++nextIndex];\r\n\t\t\t}\r\n\t\t\t//convert the lerp value to the segment range\r\n\t\t\tlerp = (lerp - current.time) / (next.time - current.time);\r\n\t\t\tlet curVal = ParticleUtils.hexToRGB(current.value);\r\n\t\t\tlet nextVal = ParticleUtils.hexToRGB(next.value);\r\n\t\t\tlet output:Color = {\r\n\t\t\t\tr: (nextVal.r - curVal.r) * lerp + curVal.r,\r\n\t\t\t\tg: (nextVal.g - curVal.g) * lerp + curVal.g,\r\n\t\t\t\tb: (nextVal.b - curVal.b) * lerp + curVal.b,\r\n\t\t\t};\r\n\t\t\tcurrentNode.next = new PropertyNode(output, i / numSteps);\r\n\t\t\tcurrentNode = currentNode.next;\r\n\t\t}\r\n\t\t//we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\r\n\t\t//the particle has died of old age\r\n\t\treturn first;\r\n\t}\r\n}","import {ParticleUtils, SimpleEase, Color} from \"./ParticleUtils\";\r\nimport {PropertyNode} from \"./PropertyNode\";\r\n\r\n/**\r\n * Singly linked list container for keeping track of interpolated properties for particles.\r\n * Each Particle will have one of these for each interpolated property.\r\n */\r\nexport class PropertyList<V>\r\n{\r\n\t/**\r\n\t * The current property node in the linked list.\r\n\t */\r\n\tpublic current: PropertyNode<V>;\r\n\t/**\r\n\t * The next property node in the linked list. Stored separately for slightly less variable\r\n\t * access.\r\n\t */\r\n\tpublic next: PropertyNode<V>;\r\n\t/**\r\n\t * Calculates the correct value for the current interpolation value. This method is set in\r\n\t * the reset() method.\r\n\t * @param lerp The interpolation value from 0-1.\r\n\t * @return The interpolated value. Colors are converted to the hex value.\r\n\t */\r\n\tpublic interpolate: (lerp:number)=>number;\r\n\t/**\r\n\t * A custom easing method for this list.\r\n\t * @param lerp The interpolation value from 0-1.\r\n\t * @return The eased value, also from 0-1.\r\n\t */\r\n\tpublic ease: SimpleEase;\r\n\t/**\r\n\t * If this list manages colors, which requires a different method for interpolation.\r\n\t */\r\n\tprivate isColor: boolean;\r\n\t\r\n    /**\r\n     * @param isColor If this list handles color values\r\n     */\r\n\tconstructor(isColor: boolean = false)\r\n\t{\r\n\t\tthis.current = null;\r\n\t\tthis.next = null;\r\n\t\tthis.isColor = !!isColor;\r\n\t\tthis.interpolate = null;\r\n\t\tthis.ease = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the list for use.\r\n\t * @param first The first node in the list.\r\n\t * @param first.isStepped If the values should be stepped instead of interpolated linearly.\r\n\t */\r\n\tpublic reset(first: PropertyNode<V>)\r\n\t{\r\n\t\tthis.current = first;\r\n\t\tthis.next = first.next;\r\n\t\tconst isSimple = this.next && this.next.time >= 1;\r\n\t\tif (isSimple)\r\n\t\t{\r\n\t\t\tthis.interpolate = this.isColor ? intColorSimple : intValueSimple;\r\n\t\t}\r\n\t\telse if (first.isStepped)\r\n\t\t{\r\n\t\t\tthis.interpolate = this.isColor ? intColorStepped : intValueStepped;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.interpolate = this.isColor ? intColorComplex : intValueComplex;\r\n\t\t}\r\n\t\tthis.ease = this.current.ease;\r\n\t}\r\n}\r\n\r\nfunction intValueSimple(this: PropertyList<number>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\n\r\nfunction intColorSimple(this: PropertyList<Color>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\tlet curVal = this.current.value, nextVal = this.next.value;\r\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\r\n}\r\n\r\nfunction intValueComplex(this: PropertyList<number>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\t//make sure we are on the right segment\r\n\twhile (lerp > this.next.time)\r\n\t{\r\n\t\tthis.current = this.next;\r\n\t\tthis.next = this.next.next;\r\n\t}\r\n\t//convert the lerp value to the segment range\r\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\r\n}\r\n\r\nfunction intColorComplex(this: PropertyList<Color>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\t//make sure we are on the right segment\r\n\twhile (lerp > this.next.time)\r\n\t{\r\n\t\tthis.current = this.next;\r\n\t\tthis.next = this.next.next;\r\n\t}\r\n\t//convert the lerp value to the segment range\r\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\r\n\tlet curVal = this.current.value, nextVal = this.next.value;\r\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\r\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\r\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\r\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\r\n}\r\n\r\nfunction intValueStepped(this: PropertyList<number>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\t//make sure we are on the right segment\r\n\twhile (this.next && lerp > this.next.time)\r\n\t{\r\n\t\tthis.current = this.next;\r\n\t\tthis.next = this.next.next;\r\n\t}\r\n\treturn this.current.value;\r\n}\r\n\r\nfunction intColorStepped(this: PropertyList<Color>, lerp: number)\r\n{\r\n\tif (this.ease)\r\n\t\tlerp = this.ease(lerp);\r\n\t//make sure we are on the right segment\r\n\twhile (this.next && lerp > this.next.time)\r\n\t{\r\n\t\tthis.current = this.next;\r\n\t\tthis.next = this.next.next;\r\n\t}\r\n\tlet curVal = this.current.value;\r\n\treturn ParticleUtils.combineRGBComponents(curVal.r, curVal.g, curVal.b);\r\n}","import {Emitter} from \"./Emitter\";\r\nimport {ParticleUtils, SimpleEase, Color} from \"./ParticleUtils\";\r\nimport {PropertyList} from \"./PropertyList\";\r\nimport {Sprite, Point, Texture} from 'pixi.js-legacy';\r\n\r\n/**\r\n * An individual particle image. You shouldn't have to deal with these.\r\n */\r\nexport class Particle extends Sprite\r\n{\r\n\t/**\r\n\t * The emitter that controls this particle.\r\n\t */\r\n\tpublic emitter: Emitter;\r\n\t/**\r\n\t * The velocity of the particle. Speed may change, but the angle also\r\n\t * contained in velocity is constant.\r\n\t */\r\n\tpublic velocity: Point;\r\n\t/**\r\n\t * The maximum lifetime of this particle, in seconds.\r\n\t */\r\n\tpublic maxLife: number;\r\n\t/**\r\n\t * The current age of the particle, in seconds.\r\n\t */\r\n\tpublic age: number;\r\n\t/**\r\n\t * A simple easing function to be applied to all properties that\r\n\t * are being interpolated.\r\n\t */\r\n\tpublic ease: SimpleEase;\r\n\t/**\r\n\t * Extra data that the emitter passes along for custom particles.\r\n\t */\r\n\tpublic extraData: any;\r\n\t/**\r\n\t * The alpha of the particle throughout its life.\r\n\t */\r\n\tpublic alphaList: PropertyList<number>;\r\n\t/**\r\n\t * The speed of the particle throughout its life.\r\n\t */\r\n\tpublic speedList: PropertyList<number>;\r\n\t/**\r\n\t * A multiplier from 0-1 applied to the speed of the particle at all times.\r\n\t */\r\n\tpublic speedMultiplier: number;\r\n\t/**\r\n\t * Acceleration to apply to the particle.\r\n\t */\r\n\tpublic acceleration: Point;\r\n\t/**\r\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n\t * will disable the maximum speed.\r\n\t */\r\n\tpublic maxSpeed: number;\r\n\t/**\r\n\t * Speed at which the particle rotates, in radians per second.\r\n\t */\r\n\tpublic rotationSpeed: number;\r\n\r\n\t/**\r\n\t * Acceleration of rotation (angular acceleration) to apply to the particle.\r\n\t */\r\n\tpublic rotationAcceleration: number;\r\n\r\n\t/**\r\n\t * If particle rotation is locked, preventing rotation from occurring due\r\n\t * to directional changes.\r\n\t */\r\n\tpublic noRotation: boolean;\r\n\t/**\r\n\t * The scale of the particle throughout its life.\r\n\t */\r\n\tpublic scaleList: PropertyList<number>;\r\n\t/**\r\n\t * A multiplier from 0-1 applied to the scale of the particle at all times.\r\n\t */\r\n\tpublic scaleMultiplier: number;\r\n\t/**\r\n\t * The tint of the particle throughout its life.\r\n\t */\r\n\tpublic colorList: PropertyList<Color>;\r\n\t/**\r\n\t * A reference to init, so that subclasses can access it without the penalty of Function.call()\r\n\t */\r\n\tprotected Particle_init: typeof Particle.prototype.init;\r\n\t/**\r\n\t * A reference to update so that subclasses can access the original without the overhead\r\n\t * of Function.call().\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t * @return The standard interpolation multiplier (0-1) used for all relevant particle\r\n\t *                   properties. A value of -1 means the particle died of old age instead.\r\n\t */\r\n\tprotected Particle_update: typeof Particle.prototype.update;\r\n\tprotected Particle_destroy: typeof Particle.prototype.destroy;\r\n\tprotected Sprite_destroy: typeof Sprite.prototype.destroy;\r\n\t/**\r\n\t * If alpha should be interpolated at all.\r\n\t */\r\n\tprotected _doAlpha: boolean;\r\n\t/**\r\n\t * If scale should be interpolated at all.\r\n\t */\r\n\tprotected _doScale: boolean;\r\n\t/**\r\n\t * If speed should be interpolated at all.\r\n\t */\r\n\tprotected _doSpeed: boolean;\r\n\t/**\r\n\t * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\r\n\t * and _doSpeed gets priority.\r\n\t */\r\n\tprotected _doAcceleration: boolean;\r\n\t/**\r\n\t * If color should be interpolated at all.\r\n\t */\r\n\tprotected _doColor: boolean;\r\n\t/**\r\n\t * If normal movement should be handled. Subclasses wishing to override movement\r\n\t * can set this to false in init().\r\n\t */\r\n\tprotected _doNormalMovement: boolean;\r\n\t/**\r\n\t * One divided by the max life of the particle, saved for slightly faster math.\r\n\t */\r\n\tprivate _oneOverLife: number;\r\n\t/**\r\n\t * Reference to the next particle in the list.\r\n\t */\r\n\tpublic next: Particle;\r\n\r\n\t/**\r\n\t * Reference to the previous particle in the list.\r\n\t */\r\n\tpublic prev: Particle;\r\n\r\n\t/**\r\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\r\n\t */\r\n\tconstructor(emitter: Emitter)\r\n\t{\r\n\t\t//start off the sprite with a blank texture, since we are going to replace it\r\n\t\t//later when the particle is initialized.\r\n\t\tsuper();\r\n\t\tthis.emitter = emitter;\r\n\t\t//particles should be centered\r\n\t\tthis.anchor.x = this.anchor.y = 0.5;\r\n\t\tthis.velocity = new Point();\r\n\t\tthis.rotationSpeed = 0;\r\n\t\tthis.rotationAcceleration = 0;\r\n\t\tthis.maxLife = 0;\r\n\t\tthis.age = 0;\r\n\t\tthis.ease = null;\r\n\t\tthis.extraData = null;\r\n\t\tthis.alphaList = new PropertyList();\r\n\t\tthis.speedList = new PropertyList();\r\n\t\tthis.speedMultiplier = 1;\r\n\t\tthis.acceleration = new Point();\r\n\t\tthis.maxSpeed = NaN;\r\n\t\tthis.scaleList = new PropertyList();\r\n\t\tthis.scaleMultiplier = 1;\r\n\t\tthis.colorList = new PropertyList(true);\r\n\t\tthis._doAlpha = false;\r\n\t\tthis._doScale = false;\r\n\t\tthis._doSpeed = false;\r\n\t\tthis._doAcceleration = false;\r\n\t\tthis._doColor = false;\r\n\t\tthis._doNormalMovement = false;\r\n\t\tthis._oneOverLife = 0;\r\n\t\tthis.next = null;\r\n\t\tthis.prev = null;\r\n\r\n\t\t//save often used functions on the instance instead of the prototype for better speed\r\n\t\tthis.init = this.init;\r\n\t\tthis.Particle_init = Particle.prototype.init;\r\n\t\tthis.update = this.update;\r\n\t\tthis.Particle_update = Particle.prototype.update;\r\n\t\tthis.Sprite_destroy = super.destroy;\r\n\t\tthis.Particle_destroy = Particle.prototype.destroy;\r\n\t\tthis.applyArt = this.applyArt;\r\n\t\tthis.kill = this.kill;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tpublic init()\r\n\t{\r\n\t\t//reset the age\r\n\t\tthis.age = 0;\r\n\t\t//set up the velocity based on the start speed and rotation\r\n\t\tthis.velocity.x = this.speedList.current.value * this.speedMultiplier;\r\n\t\tthis.velocity.y = 0;\r\n\t\tParticleUtils.rotatePoint(this.rotation, this.velocity);\r\n\t\tif (this.noRotation)\r\n\t\t{\r\n\t\t\tthis.rotation = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t//convert rotation to Radians from Degrees\r\n\t\t\tthis.rotation *= ParticleUtils.DEG_TO_RADS;\r\n\t\t}\r\n\t\t//convert rotation speed to Radians from Degrees\r\n\t\tthis.rotationSpeed *= ParticleUtils.DEG_TO_RADS;\r\n\t\tthis.rotationAcceleration *= ParticleUtils.DEG_TO_RADS;\r\n\r\n\t\t//set alpha to inital alpha\r\n\t\tthis.alpha = this.alphaList.current.value;\r\n\t\t//set scale to initial scale\r\n\t\tthis.scale.x = this.scale.y = this.scaleList.current.value;\r\n\t\t//figure out what we need to interpolate\r\n\t\tthis._doAlpha = !!this.alphaList.current.next;\r\n\t\tthis._doSpeed = !!this.speedList.current.next;\r\n\t\tthis._doScale = !!this.scaleList.current.next;\r\n\t\tthis._doColor = !!this.colorList.current.next;\r\n\t\tthis._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\r\n\t\t//_doNormalMovement can be cancelled by subclasses\r\n\t\tthis._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\r\n\t\t//save our lerp helper\r\n\t\tthis._oneOverLife = 1 / this.maxLife;\r\n\t\t//set the inital color\r\n\t\tlet color = this.colorList.current.value;\r\n\t\tthis.tint = ParticleUtils.combineRGBComponents(color.r, color.g, color.b);\r\n\t\t//ensure visibility\r\n\t\tthis.visible = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the texture for the particle. This can be overridden to allow\r\n\t * for an animated particle.\r\n\t * @param art The texture to set.\r\n\t */\r\n\tpublic applyArt(art: any)\r\n\t{\r\n\t\tthis.texture = art || Texture.EMPTY;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t * @return The standard interpolation multiplier (0-1) used for all\r\n\t *         relevant particle properties. A value of -1 means the particle\r\n\t *         died of old age instead.\r\n\t */\r\n\tpublic update(delta: number): number\r\n\t{\r\n\t\t//increase age\r\n\t\tthis.age += delta;\r\n\t\t//recycle particle if it is too old\r\n\t\tif(this.age >= this.maxLife || this.age < 0)\r\n\t\t{\r\n\t\t\tthis.kill();\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t//determine our interpolation value\r\n\t\tlet lerp = this.age * this._oneOverLife;//lifetime / maxLife;\r\n\t\tif (this.ease)\r\n\t\t{\r\n\t\t\tif(this.ease.length == 4)\r\n\t\t\t{\r\n\t\t\t\t//the t, b, c, d parameters that some tween libraries use\r\n\t\t\t\t//(time, initial value, end value, duration)\r\n\t\t\t\tlerp = (this.ease as any)(lerp, 0, 1, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//the simplified version that we like that takes\r\n\t\t\t\t//one parameter, time from 0-1. TweenJS eases provide this usage.\r\n\t\t\t\tlerp = this.ease(lerp);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//interpolate alpha\r\n\t\tif (this._doAlpha)\r\n\t\t\tthis.alpha = this.alphaList.interpolate(lerp);\r\n\t\t//interpolate scale\r\n\t\tif (this._doScale)\r\n\t\t{\r\n\t\t\tlet scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\r\n\t\t\tthis.scale.x = this.scale.y = scale;\r\n\t\t}\r\n\t\t//handle movement\r\n\t\tif(this._doNormalMovement)\r\n\t\t{\r\n\t\t\tlet deltaX:number;\r\n\t\t\tlet deltaY:number;\r\n\t\t\t//interpolate speed\r\n\t\t\tif (this._doSpeed)\r\n\t\t\t{\r\n\t\t\t\tlet speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n\t\t\t\tParticleUtils.normalize(this.velocity);\r\n\t\t\t\tParticleUtils.scaleBy(this.velocity, speed);\r\n\t\t\t\tdeltaX = this.velocity.x * delta;\r\n\t\t\t\tdeltaY = this.velocity.y * delta;\r\n\t\t\t}\r\n\t\t\telse if(this._doAcceleration)\r\n\t\t\t{\r\n\t\t\t\tconst oldVX = this.velocity.x;\r\n\t\t\t\tconst oldVY = this.velocity.y;\r\n\t\t\t\tthis.velocity.x += this.acceleration.x * delta;\r\n\t\t\t\tthis.velocity.y += this.acceleration.y * delta;\r\n\t\t\t\tif (this.maxSpeed)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet currentSpeed = ParticleUtils.length(this.velocity);\r\n\t\t\t\t\t//if we are going faster than we should, clamp at the max speed\r\n\t\t\t\t\t//DO NOT recalculate vector length\r\n\t\t\t\t\tif (currentSpeed > this.maxSpeed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParticleUtils.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// calculate position delta by the midpoint between our old velocity and our new velocity\r\n\t\t\t\tdeltaX = (oldVX + this.velocity.x) / 2 * delta;\r\n\t\t\t\tdeltaY = (oldVY + this.velocity.y) / 2 * delta;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tdeltaX = this.velocity.x * delta;\r\n\t\t\t\tdeltaY = this.velocity.y * delta;\r\n\t\t\t}\r\n\t\t\t//adjust position based on velocity\r\n\t\t\tthis.position.x += deltaX;\r\n\t\t\tthis.position.y += deltaY;\r\n\t\t}\r\n\t\t//interpolate color\r\n\t\tif (this._doColor)\r\n\t\t{\r\n\t\t\tthis.tint = this.colorList.interpolate(lerp);\r\n\t\t}\r\n\t\t//update rotation\r\n\t\tif (this.rotationAcceleration !== 0)\r\n\t\t{\r\n\t\t\tconst newRotationSpeed = this.rotationSpeed + this.rotationAcceleration * delta;\r\n\r\n\t\t\tthis.rotation += (this.rotationSpeed + newRotationSpeed) / 2 * delta;\r\n\t\t\tthis.rotationSpeed = newRotationSpeed;\r\n\t\t}\r\n\t\telse if (this.rotationSpeed !== 0)\r\n\t\t{\r\n\t\t\tthis.rotation += this.rotationSpeed * delta;\r\n\t\t}\r\n\t\telse if(this.acceleration && !this.noRotation)\r\n\t\t{\r\n\t\t\tthis.rotation = Math.atan2(this.velocity.y, this.velocity.x);// + Math.PI / 2;\r\n\t\t}\r\n\t\treturn lerp;\r\n\t}\r\n\r\n\t/**\r\n\t * Kills the particle, removing it from the display list\r\n\t * and telling the emitter to recycle it.\r\n\t */\r\n\tpublic kill()\r\n\t{\r\n\t\tthis.emitter.recycle(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tpublic destroy()\r\n\t{\r\n\t\tif (this.parent)\r\n\t\t\tthis.parent.removeChild(this);\r\n\t\tthis.Sprite_destroy();\r\n\t\tthis.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\r\n\t\t\tthis.speedList = this.ease = this.next = this.prev = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n\t * modifications to prepare it ahead of time.\r\n\t * @param art The array of art data. For Particle, it should be an array of\r\n\t *            Textures. Any strings in the array will be converted to\r\n\t *            Textures via Texture.from().\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tpublic static parseArt(art:any[]): any[]\r\n\t{\r\n\t\t//convert any strings to Textures.\r\n\t\tlet i;\r\n\t\tfor(i = art.length; i >= 0; --i)\r\n\t\t{\r\n\t\t\tif(typeof art[i] == \"string\")\r\n\t\t\t\tart[i] = Texture.from(art[i]);\r\n\t\t}\r\n\t\t//particles from different base textures will be slower in WebGL than if they\r\n\t\t//were from one spritesheet\r\n\t\tif(ParticleUtils.verbose)\r\n\t\t{\r\n\t\t\tfor(i = art.length - 1; i > 0; --i)\r\n\t\t\t{\r\n\t\t\t\tif(art[i].baseTexture != art[i - 1].baseTexture)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (window.console)\r\n\t\t\t\t\t\tconsole.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn art;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses extra emitter data to ensure it is set up for this particle class.\r\n\t * Particle does nothing to the extra data.\r\n\t * @param extraData The extra data from the particle config.\r\n\t * @return The parsed extra data.\r\n\t */\r\n\tpublic static parseData(extraData: any): any\r\n\t{\r\n\t\treturn extraData;\r\n\t}\r\n}\r\n","import {Point} from 'pixi.js-legacy';\r\n\r\nexport interface BasicPoint\r\n{\r\n\tx: number;\r\n\ty: number;\r\n}\r\n\r\nexport interface Segment\r\n{\r\n\tp1: BasicPoint;\r\n\tp2: BasicPoint;\r\n\tl: number;\r\n}\r\n\r\n/**\r\n * Chain of line segments for generating spawn positions.\r\n */\r\nexport class PolygonalChain\r\n{\r\n\t/**\r\n\t * List of segment objects in the chain.\r\n\t */\r\n\tprivate segments:Segment[];\r\n\t/**\r\n\t * Total length of all segments of the chain.\r\n\t */\r\n\tprivate totalLength:number;\r\n\t/**\r\n\t * Total length of segments up to and including the segment of the same index.\r\n\t * Used for weighted random selection of segment.\r\n\t */\r\n\tprivate countingLengths:number[];\r\n\t\r\n\t/**\r\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n\t */\r\n\tconstructor(data:BasicPoint[]|BasicPoint[][])\r\n\t{\r\n\t\tthis.segments = [];\r\n\t\tthis.countingLengths = [];\r\n\t\tthis.totalLength = 0;\r\n\t\tthis.init(data);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\r\n\t */\r\n\tprivate init(data:BasicPoint[]|BasicPoint[][])\r\n\t{\r\n\t\t// if data is not present, set up a segment of length 0\r\n\t\tif (!data || !data.length)\r\n\t\t{\r\n\t\t\tthis.segments.push({p1:{x:0, y:0}, p2:{x:0, y:0}, l:0});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (Array.isArray(data[0]))\r\n\t\t\t{\r\n\t\t\t\t// list of segment chains, each defined as a list of points\r\n\t\t\t\tfor (let i = 0; i < data.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\t// loop through the chain, connecting points\r\n\t\t\t\t\tconst chain = data[i] as BasicPoint[];\r\n\t\t\t\t\tlet prevPoint = chain[0] as BasicPoint;\r\n\t\t\t\t\tfor (let j = 1; j < chain.length; ++j)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst second = chain[j] as BasicPoint;\r\n\t\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\r\n\t\t\t\t\t\tprevPoint = second;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet prevPoint = data[0] as BasicPoint;\r\n\t\t\t\t// list of points\r\n\t\t\t\tfor (let i = 1; i < data.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst second = data[i] as BasicPoint;\r\n\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\r\n\t\t\t\t\tprevPoint = second;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// now go through our segments to calculate the lengths so that we\r\n\t\t// can set up a nice weighted random distribution\r\n\t\tfor (let i = 0; i < this.segments.length; ++i) {\r\n\t\t\tconst {p1, p2} = this.segments[i];\r\n\t\t\tconst segLength = Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\r\n\t\t\t// save length so we can turn a random number into a 0-1 interpolation value later\r\n\t\t\tthis.segments[i].l = segLength;\r\n\t\t\tthis.totalLength += segLength;\r\n\t\t\t// keep track of the length so far, counting up\r\n\t\t\tthis.countingLengths.push(this.totalLength);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets a random point in the chain.\r\n\t * @param out The point to store the selected position in.\r\n\t */\r\n\tpublic getRandomPoint(out:Point)\r\n\t{\r\n\t\t// select a random spot in the length of the chain\r\n\t\tconst rand = Math.random() * this.totalLength;\r\n\t\tlet chosenSeg:Segment;\r\n\t\tlet lerp:number;\r\n\t\t// if only one segment, it wins\r\n\t\tif (this.segments.length === 1)\r\n\t\t{\r\n\t\t\tchosenSeg = this.segments[0];\r\n\t\t\tlerp = rand;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// otherwise, go through countingLengths until we have determined\r\n\t\t\t// which segment we chose\r\n\t\t\tfor (let i = 0; i < this.countingLengths.length; ++i) {\r\n\t\t\t\tif (rand < this.countingLengths[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tchosenSeg = this.segments[i];\r\n\t\t\t\t\t// set lerp equal to the length into that segment (i.e. the remainder after subtracting all the segments before it)\r\n\t\t\t\t\tlerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// divide lerp by the segment length, to result in a 0-1 number.\r\n\t\tlerp /= chosenSeg.l || 1;\r\n\t\tconst {p1, p2} = chosenSeg;\r\n\t\t// now calculate the position in the segment that the lerp value represents\r\n\t\tout.x = p1.x + lerp * (p2.x - p1.x);\r\n\t\tout.y = p1.y + lerp * (p2.y - p1.y);\r\n\t}\r\n}","import {ParticleUtils, Color, SimpleEase} from \"./ParticleUtils\";\r\nimport {Particle} from \"./Particle\";\r\nimport {PropertyNode} from \"./PropertyNode\";\r\nimport {PolygonalChain} from \"./PolygonalChain\";\r\nimport {EmitterConfig, OldEmitterConfig} from \"./EmitterConfig\";\r\nimport {Point, Circle, Rectangle, Container, settings} from \"pixi.js-legacy\";\r\nimport * as pixi from \"pixi.js-legacy\";\r\n// get the shared ticker, in V4 and V5 friendly methods\r\n/**\r\n * @hidden\r\n */\r\nlet ticker: pixi.Ticker = pixi.Ticker.shared;\r\n\r\nexport interface ParticleConstructor\r\n{\r\n\tnew (emitter:Emitter):Particle;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nconst helperPoint = new Point();\r\n\r\n/**\r\n * A particle emitter.\r\n */\r\nexport class Emitter\r\n{\r\n\t/**\r\n\t * The constructor used to create new particles. The default is\r\n\t * the built in particle class.\r\n\t */\r\n\tprotected _particleConstructor: typeof Particle;\r\n\t//properties for individual particles\r\n\t/**\r\n\t * An array of PIXI Texture objects.\r\n\t */\r\n\tpublic particleImages: any[];\r\n\t/**\r\n\t * The first node in the list of alpha values for all particles.\r\n\t */\r\n\tpublic startAlpha: PropertyNode<number>;\r\n\t/**\r\n\t * The first node in the list of speed values of all particles.\r\n\t */\r\n\tpublic startSpeed: PropertyNode<number>;\r\n\t/**\r\n\t * A minimum multiplier for the speed of a particle at all stages of its life. A value between\r\n\t * minimumSpeedMultiplier and 1 is randomly generated for each particle.\r\n\t */\r\n\tpublic minimumSpeedMultiplier: number;\r\n\t/**\r\n\t * Acceleration to apply to particles. Using this disables\r\n\t * any interpolation of particle speed. If the particles do\r\n\t * not have a rotation speed, then they will be rotated to\r\n\t * match the direction of travel.\r\n\t */\r\n\tpublic acceleration: Point;\r\n\t/**\r\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\r\n\t * will disable the maximum speed.\r\n\t */\r\n\tpublic maxSpeed: number;\r\n\t/**\r\n\t * The first node in the list of scale values of all particles.\r\n\t */\r\n\tpublic startScale: PropertyNode<number>;\r\n\t/**\r\n\t * A minimum multiplier for the scale of a particle at all stages of its life. A value between\r\n\t * minimumScaleMultiplier and 1 is randomly generated for each particle.\r\n\t */\r\n\tpublic minimumScaleMultiplier: number;\r\n\t/**\r\n\t * The first node in the list of  color values of all particles, as red, green, and blue\r\n\t * uints from 0-255.\r\n\t */\r\n\tpublic startColor: PropertyNode<Color>;\r\n\t/**\r\n\t * The minimum lifetime for a particle, in seconds.\r\n\t */\r\n\tpublic minLifetime: number;\r\n\t/**\r\n\t * The maximum lifetime for a particle, in seconds.\r\n\t */\r\n\tpublic maxLifetime: number;\r\n\t/**\r\n\t * The minimum start rotation for a particle, in degrees. This value\r\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\r\n\t */\r\n\tpublic minStartRotation: number;\r\n\t/**\r\n\t * The maximum start rotation for a particle, in degrees. This value\r\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\r\n\t */\r\n\tpublic maxStartRotation: number;\r\n\t/**\r\n\t * If no particle rotation should occur. Starting rotation will still\r\n\t * affect the direction in which particles move. If the rotation speed\r\n\t * is set, then this will be ignored.\r\n\t */\r\n\tpublic noRotation: boolean;\r\n\t/**\r\n\t * The minimum rotation speed for a particle, in degrees per second.\r\n\t * This only visually spins the particle, it does not change direction\r\n\t * of movement.\r\n\t */\r\n\tpublic minRotationSpeed: number;\r\n\t/**\r\n\t * The maximum rotation speed for a particle, in degrees per second.\r\n\t * This only visually spins the particle, it does not change direction\r\n\t * of movement.\r\n\t */\r\n\tpublic maxRotationSpeed: number;\r\n\t/**\r\n\t* The Acceleration of rotation (angular acceleration) for a particle, in degrees per second.\r\n\t*/\r\n\tpublic rotationAcceleration: number;\r\n\t/**\r\n\t * The blend mode for all particles, as named by PIXI.blendModes.\r\n\t */\r\n\tpublic particleBlendMode: number;\r\n\t/**\r\n\t * An easing function for nonlinear interpolation of values. Accepts a single\r\n\t * parameter of time as a value from 0-1, inclusive. Expected outputs are values\r\n\t * from 0-1, inclusive.\r\n\t */\r\n\tpublic customEase: SimpleEase;\r\n\t/**\r\n\t *\tExtra data for use in custom particles. The emitter doesn't look inside, but\r\n\t *\tpasses it on to the particle to use in init().\r\n\t */\r\n\tpublic extraData: any;\r\n\t//properties for spawning particles\r\n\t/**\r\n\t * Time between particle spawns in seconds.\r\n\t */\r\n\tprotected _frequency: number;\r\n\t/**\r\n\t * Chance that a particle will be spawned on each opportunity to spawn one.\r\n\t * 0 is 0%, 1 is 100%.\r\n\t */\r\n\tpublic spawnChance: number;\r\n\t/**\r\n\t * Maximum number of particles to keep alive at a time. If this limit\r\n\t * is reached, no more particles will spawn until some have died.\r\n\t */\r\n\tpublic maxParticles: number;\r\n\t/**\r\n\t * The amount of time in seconds to emit for before setting emit to false.\r\n\t * A value of -1 is an unlimited amount of time.\r\n\t */\r\n\tpublic emitterLifetime: number;\r\n\t/**\r\n\t * Position at which to spawn particles, relative to the emitter's owner's origin.\r\n\t * For example, the flames of a rocket travelling right might have a spawnPos\r\n\t * of {x:-50, y:0}.\r\n\t * to spawn at the rear of the rocket.\r\n\t * To change this, use updateSpawnPos().\r\n\t */\r\n\tpublic spawnPos: Point;\r\n\t/**\r\n\t * How the particles will be spawned. Valid types are \"point\", \"rectangle\",\r\n\t * \"circle\", \"burst\", \"ring\".\r\n\t */\r\n\tpublic spawnType: string;\r\n\t/**\r\n\t * A reference to the emitter function specific to the spawn type.\r\n\t */\r\n\tprotected _spawnFunc: (p: Particle, emitPosX: number, emitPosY: number, i?: number) => void;\r\n\t/**\r\n\t * A rectangle relative to spawnPos to spawn particles inside if the spawn type is \"rect\".\r\n\t */\r\n\tpublic spawnRect: Rectangle;\r\n\t/**\r\n\t * A polygon relative to spawnPos to spawn particles on the chain if the spawn type is \"polygonalChain\".\r\n\t */\r\n\tpublic spawnPolygonalChain: PolygonalChain;\r\n\t/**\r\n\t * A circle relative to spawnPos to spawn particles inside if the spawn type is \"circle\".\r\n\t */\r\n\tpublic spawnCircle: Circle & {minRadius: number};\r\n\t/**\r\n\t * Number of particles to spawn time that the frequency allows for particles to spawn.\r\n\t */\r\n\tpublic particlesPerWave: number;\r\n\t/**\r\n\t * Spacing between particles in a burst. 0 gives a random angle for each particle.\r\n\t */\r\n\tpublic particleSpacing: number;\r\n\t/**\r\n\t * Angle at which to start spawning particles in a burst.\r\n\t */\r\n\tpublic angleStart: number;\r\n\t/**\r\n\t * Rotation of the emitter or emitter's owner in degrees. This is added to\r\n\t * the calculated spawn angle.\r\n\t * To change this, use rotate().\r\n\t */\r\n\tprotected rotation: number;\r\n\t/**\r\n\t * The world position of the emitter's owner, to add spawnPos to when\r\n\t * spawning particles. To change this, use updateOwnerPos().\r\n\t */\r\n\tprotected ownerPos: Point;\r\n\t/**\r\n\t * The origin + spawnPos in the previous update, so that the spawn position\r\n\t * can be interpolated to space out particles better.\r\n\t */\r\n\tprotected _prevEmitterPos: Point;\r\n\t/**\r\n\t * If _prevEmitterPos is valid, to prevent interpolation on the first update\r\n\t */\r\n\tprotected _prevPosIsValid: boolean;\r\n\t/**\r\n\t * If either ownerPos or spawnPos has changed since the previous update.\r\n\t */\r\n\tprotected _posChanged: boolean;\r\n\t/**\r\n\t * The container to add particles to.\r\n\t */\r\n\tprotected _parent: Container;\r\n\t/**\r\n\t * If particles should be added at the back of the display list instead of the front.\r\n\t */\r\n\tpublic addAtBack: boolean;\r\n\t/**\r\n\t * The current number of active particles.\r\n\t */\r\n\tpublic particleCount: number;\r\n\t/**\r\n\t * If particles should be emitted during update() calls. Setting this to false\r\n\t * stops new particles from being created, but allows existing ones to die out.\r\n\t */\r\n\tprotected _emit: boolean;\r\n\t/**\r\n\t * The timer for when to spawn particles in seconds, where numbers less\r\n\t * than 0 mean that particles should be spawned.\r\n\t */\r\n\tprotected _spawnTimer: number;\r\n\t/**\r\n\t * The life of the emitter in seconds.\r\n\t */\r\n\tprotected _emitterLife: number;\r\n\t/**\r\n\t * The particles that are active and on the display list. This is the first particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _activeParticlesFirst: Particle;\r\n\t/**\r\n\t * The particles that are active and on the display list. This is the last particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _activeParticlesLast: Particle;\r\n\t/**\r\n\t * The particles that are not currently being used. This is the first particle in a\r\n\t * linked list.\r\n\t */\r\n\tprotected _poolFirst: Particle;\r\n\t/**\r\n\t * The original config object that this emitter was initialized with.\r\n\t */\r\n\tprotected _origConfig: any;\r\n\t/**\r\n\t * The original particle image data that this emitter was initialized with.\r\n\t */\r\n\tprotected _origArt: any;\r\n\t/**\r\n\t * If the update function is called automatically from the shared ticker.\r\n\t * Setting this to false requires calling the update function manually.\r\n\t */\r\n\tprotected _autoUpdate: boolean;\r\n\t/**\r\n\t * If the emitter should destroy itself when all particles have died out. This is set by\r\n\t * playOnceAndDestroy();\r\n\t */\r\n\tprotected _destroyWhenComplete: boolean;\r\n\t/**\r\n\t * A callback for when all particles have died out. This is set by\r\n\t * playOnceAndDestroy() or playOnce();\r\n\t */\r\n\tprotected _completeCallback: () => void;\r\n\r\n\t/**\r\n\t * @param particleParent The container to add the particles to.\r\n\t * @param particleImages A texture or array of textures to use\r\n\t *                       for the particles. Strings will be turned\r\n\t *                       into textures via Texture.fromImage().\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t * @param config.emit If config.emit is explicitly passed as false, the\r\n\t *                    Emitter will start disabled.\r\n\t * @param config.autoUpdate If config.autoUpdate is explicitly passed as\r\n\t *                          true, the Emitter will automatically call\r\n\t *                          update via the PIXI shared ticker.\r\n\t */\r\n\tconstructor(particleParent: Container, particleImages: any, config: EmitterConfig|OldEmitterConfig)\r\n\t{\r\n\t\tthis._particleConstructor = Particle;\r\n\t\t//properties for individual particles\r\n\t\tthis.particleImages = null;\r\n\t\tthis.startAlpha = null;\r\n\t\tthis.startSpeed = null;\r\n\t\tthis.minimumSpeedMultiplier = 1;\r\n\t\tthis.acceleration = null;\r\n\t\tthis.maxSpeed = NaN;\r\n\t\tthis.startScale = null;\r\n\t\tthis.minimumScaleMultiplier = 1;\r\n\t\tthis.startColor = null;\r\n\t\tthis.minLifetime = 0;\r\n\t\tthis.maxLifetime = 0;\r\n\t\tthis.minStartRotation = 0;\r\n\t\tthis.maxStartRotation = 0;\r\n\t\tthis.noRotation = false;\r\n\t\tthis.minRotationSpeed = 0;\r\n\t\tthis.maxRotationSpeed = 0;\r\n\t\tthis.particleBlendMode = 0;\r\n\t\tthis.customEase = null;\r\n\t\tthis.extraData = null;\r\n\t\t//properties for spawning particles\r\n\t\tthis._frequency = 1;\r\n\t\tthis.spawnChance = 1;\r\n\t\tthis.maxParticles = 1000;\r\n\t\tthis.emitterLifetime = -1;\r\n\t\tthis.spawnPos = null;\r\n\t\tthis.spawnType = null;\r\n\t\tthis._spawnFunc = null;\r\n\t\tthis.spawnRect = null;\r\n\t\tthis.spawnCircle = null;\r\n\t\tthis.spawnPolygonalChain = null;\r\n\t\tthis.particlesPerWave = 1;\r\n\t\tthis.particleSpacing = 0;\r\n\t\tthis.angleStart = 0;\r\n\t\t//emitter properties\r\n\t\tthis.rotation = 0;\r\n\t\tthis.ownerPos = null;\r\n\t\tthis._prevEmitterPos = null;\r\n\t\tthis._prevPosIsValid = false;\r\n\t\tthis._posChanged = false;\r\n\t\tthis._parent = null;\r\n\t\tthis.addAtBack = false;\r\n\t\tthis.particleCount = 0;\r\n\t\tthis._emit = false;\r\n\t\tthis._spawnTimer = 0;\r\n\t\tthis._emitterLife = -1;\r\n\t\tthis._activeParticlesFirst = null;\r\n\t\tthis._activeParticlesLast = null;\r\n\t\tthis._poolFirst = null;\r\n\t\tthis._origConfig = null;\r\n\t\tthis._origArt = null;\r\n\t\tthis._autoUpdate = false;\r\n\t\tthis._destroyWhenComplete = false;\r\n\t\tthis._completeCallback = null;\r\n\r\n\t\t//set the initial parent\r\n\t\tthis.parent = particleParent;\r\n\r\n\t\tif(particleImages && config)\r\n\t\t\tthis.init(particleImages, config);\r\n\r\n\t\t//save often used functions on the instance instead of the prototype for better speed\r\n\t\tthis.recycle = this.recycle;\r\n\t\tthis.update = this.update;\r\n\t\tthis.rotate = this.rotate;\r\n\t\tthis.updateSpawnPos = this.updateSpawnPos;\r\n\t\tthis.updateOwnerPos = this.updateOwnerPos;\r\n\t}\r\n\r\n\t/**\r\n\t * Time between particle spawns in seconds. If this value is not a number greater than 0,\r\n\t * it will be set to 1 (particle per second) to prevent infinite loops.\r\n\t */\r\n\tpublic get frequency() { return this._frequency; }\r\n\tpublic set frequency(value)\r\n\t{\r\n\t\t//do some error checking to prevent infinite loops\r\n\t\tif(typeof value == \"number\" && value > 0)\r\n\t\t\tthis._frequency = value;\r\n\t\telse\r\n\t\t\tthis._frequency = 1;\r\n\t}\r\n\t/**\r\n\t * The constructor used to create new particles. The default is\r\n\t * the built in Particle class. Setting this will dump any active or\r\n\t * pooled particles, if the emitter has already been used.\r\n\t */\r\n\tpublic get particleConstructor() { return this._particleConstructor; }\r\n\tpublic set particleConstructor(value)\r\n\t{\r\n\t\tif(value != this._particleConstructor)\r\n\t\t{\r\n\t\t\tthis._particleConstructor = value;\r\n\t\t\t//clean up existing particles\r\n\t\t\tthis.cleanup();\r\n\t\t\t//scrap all the particles\r\n\t\t\tfor (let particle = this._poolFirst; particle; particle = particle.next)\r\n\t\t\t{\r\n\t\t\t\tparticle.destroy();\r\n\t\t\t}\r\n\t\t\tthis._poolFirst = null;\r\n\t\t\t//re-initialize the emitter so that the new constructor can do anything it needs to\r\n\t\t\tif(this._origConfig && this._origArt)\r\n\t\t\t\tthis.init(this._origArt, this._origConfig);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* The container to add particles to. Settings this will dump any active particles.\r\n\t*/\r\n\tpublic get parent() { return this._parent; }\r\n\tpublic set parent(value)\r\n\t{\r\n\t\tthis.cleanup();\r\n\t\tthis._parent = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the emitter based on the config settings.\r\n\t * @param art A texture or array of textures to use for the particles.\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tpublic init(art: any, config: EmitterConfig|OldEmitterConfig)\r\n\t{\r\n\t\tif(!art || !config)\r\n\t\t\treturn;\r\n\t\t//clean up any existing particles\r\n\t\tthis.cleanup();\r\n\r\n\t\t//store the original config and particle images, in case we need to re-initialize\r\n\t\t//when the particle constructor is changed\r\n\t\tthis._origConfig = config;\r\n\t\tthis._origArt = art;\r\n\r\n\t\t//set up the array of data, also ensuring that it is an array\r\n\t\tart = Array.isArray(art) ? art.slice() : [art];\r\n\t\t//run the art through the particle class's parsing function\r\n\t\tconst partClass = this._particleConstructor;\r\n\t\tthis.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\r\n\t\t///////////////////////////\r\n\t\t// Particle Properties   //\r\n\t\t///////////////////////////\r\n\t\t//set up the alpha\r\n\t\tif (config.alpha)\r\n\t\t{\r\n\t\t\tthis.startAlpha = PropertyNode.createList(config.alpha);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.startAlpha = new PropertyNode(1, 0);\r\n\t\t//set up the speed\r\n\t\tif (config.speed)\r\n\t\t{\r\n\t\t\tthis.startSpeed = PropertyNode.createList(config.speed);\r\n\t\t\tthis.minimumSpeedMultiplier = ('minimumSpeedMultiplier' in config ? config.minimumSpeedMultiplier : (config.speed as any).minimumSpeedMultiplier) || 1;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.minimumSpeedMultiplier = 1;\r\n\t\t\tthis.startSpeed = new PropertyNode(0, 0);\r\n\t\t}\r\n\t\t//set up acceleration\r\n\t\tlet acceleration = config.acceleration;\r\n\t\tif(acceleration && (acceleration.x || acceleration.y))\r\n\t\t{\r\n\t\t\t//make sure we disable speed interpolation\r\n\t\t\tthis.startSpeed.next = null;\r\n\t\t\tthis.acceleration = new Point(acceleration.x, acceleration.y);\r\n\t\t\tthis.maxSpeed = config.maxSpeed || NaN;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.acceleration = new Point();\r\n\t\t//set up the scale\r\n\t\tif (config.scale)\r\n\t\t{\r\n\t\t\tthis.startScale = PropertyNode.createList(config.scale);\r\n\t\t\tthis.minimumScaleMultiplier = ('minimumScaleMultiplier' in config ? config.minimumScaleMultiplier : (config.scale as any).minimumScaleMultiplier) || 1;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.startScale = new PropertyNode(1, 0);\r\n\t\t\tthis.minimumScaleMultiplier = 1;\r\n\t\t}\r\n\t\t//set up the color\r\n\t\tif (config.color)\r\n\t\t{\r\n\t\t\tthis.startColor = PropertyNode.createList(config.color);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.startColor = new PropertyNode({r:0xFF, g:0xFF, b:0xFF}, 0);\r\n\t\t}\r\n\t\t//set up the start rotation\r\n\t\tif (config.startRotation)\r\n\t\t{\r\n\t\t\tthis.minStartRotation = config.startRotation.min;\r\n\t\t\tthis.maxStartRotation = config.startRotation.max;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.minStartRotation = this.maxStartRotation = 0;\r\n\t\tif (config.noRotation &&\r\n\t\t\t(this.minStartRotation || this.maxStartRotation))\r\n\t\t{\r\n\t\t\tthis.noRotation = !!config.noRotation;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.noRotation = false;\r\n\t\t//set up the rotation speed\r\n\t\tif (config.rotationSpeed)\r\n\t\t{\r\n\t\t\tthis.minRotationSpeed = config.rotationSpeed.min;\r\n\t\t\tthis.maxRotationSpeed = config.rotationSpeed.max;\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.minRotationSpeed = this.maxRotationSpeed = 0;\r\n\r\n\t\tthis.rotationAcceleration = config.rotationAcceleration || 0;\r\n\t\t//set up the lifetime\r\n\t\tthis.minLifetime = config.lifetime.min;\r\n\t\tthis.maxLifetime = config.lifetime.max;\r\n\t\t//get the blend mode\r\n\t\tthis.particleBlendMode = ParticleUtils.getBlendMode(config.blendMode);\r\n\t\t//use the custom ease if provided\r\n\t\tif (config.ease)\r\n\t\t{\r\n\t\t\tthis.customEase = typeof config.ease == \"function\" ?\r\n\t\t\t\tconfig.ease : ParticleUtils.generateEase(config.ease);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.customEase = null;\r\n\t\t//set up the extra data, running it through the particle class's parseData function.\r\n\t\tif(partClass.parseData)\r\n\t\t\tthis.extraData = partClass.parseData(config.extraData);\r\n\t\telse\r\n\t\t\tthis.extraData = config.extraData || null;\r\n\t\t//////////////////////////\r\n\t\t// Emitter Properties   //\r\n\t\t//////////////////////////\r\n\t\t//reset spawn type specific settings\r\n\t\tthis.spawnRect = this.spawnCircle = null;\r\n\t\tthis.particlesPerWave = 1;\r\n\t\tif (config.particlesPerWave && config.particlesPerWave > 1)\r\n\t\t\tthis.particlesPerWave = config.particlesPerWave;\r\n\t\tthis.particleSpacing = 0;\r\n\t\tthis.angleStart = 0;\r\n\t\t//determine the spawn function to use\r\n\t\tthis.parseSpawnType(config);\r\n\t\t//set the spawning frequency\r\n\t\tthis.frequency = config.frequency;\r\n\t\tthis.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\r\n\t\t//set the emitter lifetime\r\n\t\tthis.emitterLifetime = config.emitterLifetime || -1;\r\n\t\t//set the max particles\r\n\t\tthis.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\r\n\t\t//determine if we should add the particle at the back of the list or not\r\n\t\tthis.addAtBack = !!config.addAtBack;\r\n\t\t//reset the emitter position and rotation variables\r\n\t\tthis.rotation = 0;\r\n\t\tthis.ownerPos = new Point();\r\n\t\tthis.spawnPos = new Point(config.pos.x, config.pos.y);\r\n\r\n\t\tthis.initAdditional(art, config);\r\n\r\n\t\tthis._prevEmitterPos = this.spawnPos.clone();\r\n\t\t//previous emitter position is invalid and should not be used for interpolation\r\n\t\tthis._prevPosIsValid = false;\r\n\t\t//start emitting\r\n\t\tthis._spawnTimer = 0;\r\n\t\tthis.emit = config.emit === undefined ? true : !!config.emit;\r\n\t\tthis.autoUpdate = !!config.autoUpdate;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up additional parameters to the emitter from config settings.\r\n\t * Using for parsing additional parameters on classes that extend from Emitter\r\n\t * @param art A texture or array of textures to use for the particles.\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tprotected initAdditional(art: any, config: EmitterConfig|OldEmitterConfig)\r\n\t{\r\n\t}\r\n\r\n\t/**\r\n\t * Parsing emitter spawn type from config settings.\r\n\t * Place for override and add new kind of spawn type\r\n\t * @param config A configuration object containing settings for the emitter.\r\n\t */\r\n\tprotected parseSpawnType(config: EmitterConfig|OldEmitterConfig) {\r\n\t\tlet spawnCircle;\r\n\r\n\t\tswitch(config.spawnType)\r\n\t\t{\r\n\t\t\tcase \"rect\":\r\n\t\t\t\tthis.spawnType = \"rect\";\r\n\t\t\t\tthis._spawnFunc = this._spawnRect;\r\n\t\t\t\tlet spawnRect = config.spawnRect;\r\n\t\t\t\tthis.spawnRect = new Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"circle\":\r\n\t\t\t\tthis.spawnType = \"circle\";\r\n\t\t\t\tthis._spawnFunc = this._spawnCircle;\r\n\t\t\t\tspawnCircle = config.spawnCircle;\r\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ring\":\r\n\t\t\t\tthis.spawnType = \"ring\";\r\n\t\t\t\tthis._spawnFunc = this._spawnRing;\r\n\t\t\t\tspawnCircle = config.spawnCircle;\r\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\r\n\t\t\t\tthis.spawnCircle.minRadius = spawnCircle.minR;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"burst\":\r\n\t\t\t\tthis.spawnType = \"burst\";\r\n\t\t\t\tthis._spawnFunc = this._spawnBurst;\r\n\t\t\t\tthis.particleSpacing = config.particleSpacing;\r\n\t\t\t\tthis.angleStart = config.angleStart ? config.angleStart : 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"point\":\r\n\t\t\t\tthis.spawnType = \"point\";\r\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"polygonalChain\":\r\n\t\t\t\tthis.spawnType = \"polygonalChain\";\r\n\t\t\t\tthis._spawnFunc = this._spawnPolygonalChain;\r\n\t\t\t\tthis.spawnPolygonalChain = new PolygonalChain(config.spawnPolygon);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.spawnType = \"point\";\r\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Recycles an individual particle. For internal use only.\r\n\t * @param particle The particle to recycle.\r\n\t * @internal\r\n\t */\r\n\tpublic recycle(particle: Particle)\r\n\t{\r\n\t\tif(particle.next)\r\n\t\t\tparticle.next.prev = particle.prev;\r\n\t\tif(particle.prev)\r\n\t\t\tparticle.prev.next = particle.next;\r\n\t\tif(particle == this._activeParticlesLast)\r\n\t\t\tthis._activeParticlesLast = particle.prev;\r\n\t\tif(particle == this._activeParticlesFirst)\r\n\t\t\tthis._activeParticlesFirst = particle.next;\r\n\t\t//add to pool\r\n\t\tparticle.prev = null;\r\n\t\tparticle.next = this._poolFirst;\r\n\t\tthis._poolFirst = particle;\r\n\t\t//remove child from display, or make it invisible if it is in a ParticleContainer\r\n\t\tif(particle.parent)\r\n\t\t\tparticle.parent.removeChild(particle);\r\n\t\t//decrease count\r\n\t\t--this.particleCount;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the rotation of the emitter to a new value.\r\n\t * @param newRot The new rotation, in degrees.\r\n\t */\r\n\tpublic rotate(newRot: number)\r\n\t{\r\n\t\tif (this.rotation == newRot) return;\r\n\t\t//caclulate the difference in rotation for rotating spawnPos\r\n\t\tlet diff = newRot - this.rotation;\r\n\t\tthis.rotation = newRot;\r\n\t\t//rotate spawnPos\r\n\t\tParticleUtils.rotatePoint(diff, this.spawnPos);\r\n\t\t//mark the position as having changed\r\n\t\tthis._posChanged = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the spawn position of the emitter.\r\n\t * @param x The new x value of the spawn position for the emitter.\r\n\t * @param y The new y value of the spawn position for the emitter.\r\n\t */\r\n\tpublic updateSpawnPos(x: number, y: number)\r\n\t{\r\n\t\tthis._posChanged = true;\r\n\t\tthis.spawnPos.x = x;\r\n\t\tthis.spawnPos.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the position of the emitter's owner. You should call this if you are adding\r\n\t * particles to the world container that your emitter's owner is moving around in.\r\n\t * @param x The new x value of the emitter's owner.\r\n\t * @param y The new y value of the emitter's owner.\r\n\t */\r\n\tpublic updateOwnerPos(x: number, y: number)\r\n\t{\r\n\t\tthis._posChanged = true;\r\n\t\tthis.ownerPos.x = x;\r\n\t\tthis.ownerPos.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Prevents emitter position interpolation in the next update.\r\n\t * This should be used if you made a major position change of your emitter's owner\r\n\t * that was not normal movement.\r\n\t */\r\n\tpublic resetPositionTracking()\r\n\t{\r\n\t\tthis._prevPosIsValid = false;\r\n\t}\r\n\r\n\t/**\r\n\t * If particles should be emitted during update() calls. Setting this to false\r\n\t * stops new particles from being created, but allows existing ones to die out.\r\n\t */\r\n\tpublic get emit() { return this._emit; };\r\n\tpublic set emit(value)\r\n\t{\r\n\t\tthis._emit = !!value;\r\n\t\tthis._emitterLife = this.emitterLifetime;\r\n\t}\r\n\r\n\t/**\r\n\t * If the update function is called automatically from the shared ticker.\r\n\t * Setting this to false requires calling the update function manually.\r\n\t */\r\n\tpublic get autoUpdate() { return this._autoUpdate; }\r\n\tpublic set autoUpdate(value)\r\n\t{\r\n\t\tif (this._autoUpdate && !value)\r\n\t\t{\r\n\t\t\tticker.remove(this.update, this);\r\n\t\t}\r\n\t\telse if (!this._autoUpdate && value)\r\n\t\t{\r\n\t\t\tticker.add(this.update, this);\r\n\t\t}\r\n\t\tthis._autoUpdate = !!value;\r\n\t}\r\n\r\n\t/**\r\n\t * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\r\n\t * when particle emission is complete.\r\n\t * @param callback Callback for when emission is complete (all particles have died off)\r\n\t */\r\n\tpublic playOnceAndDestroy(callback?: () => void)\r\n\t{\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.emit = true;\r\n\t\tthis._destroyWhenComplete = true;\r\n\t\tthis._completeCallback = callback;\r\n\t}\r\n\r\n\t/**\r\n\t * Starts emitting particles and optionally calls a callback when particle emission is complete.\r\n\t * @param callback Callback for when emission is complete (all particles have died off)\r\n\t */\r\n\tpublic playOnce(callback?: () => void)\r\n\t{\r\n\t\tthis.emit = true;\r\n\t\tthis._completeCallback = callback;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all particles spawned by this emitter and emits new ones.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tpublic update(delta: number)\r\n\t{\r\n\t\tif (this._autoUpdate)\r\n\t\t{\r\n\t\t\tdelta = delta / settings.TARGET_FPMS / 1000;\r\n\t\t}\r\n\r\n\t\t//if we don't have a parent to add particles to, then don't do anything.\r\n\t\t//this also works as a isDestroyed check\r\n\t\tif (!this._parent) return;\r\n\t\t//update existing particles\r\n\t\tlet i, particle, next;\r\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\r\n\t\t{\r\n\t\t\tnext = particle.next;\r\n\t\t\tparticle.update(delta);\r\n\t\t}\r\n\t\tlet prevX, prevY;\r\n\t\t//if the previous position is valid, store these for later interpolation\r\n\t\tif(this._prevPosIsValid)\r\n\t\t{\r\n\t\t\tprevX = this._prevEmitterPos.x;\r\n\t\t\tprevY = this._prevEmitterPos.y;\r\n\t\t}\r\n\t\t//store current position of the emitter as local variables\r\n\t\tlet curX = this.ownerPos.x + this.spawnPos.x;\r\n\t\tlet curY = this.ownerPos.y + this.spawnPos.y;\r\n\t\t//spawn new particles\r\n\t\tif (this._emit)\r\n\t\t{\r\n\t\t\t//decrease spawn timer\r\n\t\t\tthis._spawnTimer -=  delta < 0 ? 0 : delta;\r\n\t\t\t//while _spawnTimer < 0, we have particles to spawn\r\n\t\t\twhile(this._spawnTimer <= 0)\r\n\t\t\t{\r\n\t\t\t\t//determine if the emitter should stop spawning\r\n\t\t\t\tif(this._emitterLife > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis._emitterLife -= this._frequency;\r\n\t\t\t\t\tif(this._emitterLife <= 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis._spawnTimer = 0;\r\n\t\t\t\t\t\tthis._emitterLife = 0;\r\n\t\t\t\t\t\tthis.emit = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//determine if we have hit the particle limit\r\n\t\t\t\tif(this.particleCount >= this.maxParticles)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis._spawnTimer += this._frequency;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t//determine the particle lifetime\r\n\t\t\t\tlet lifetime;\r\n\t\t\t\tif (this.minLifetime == this.maxLifetime)\r\n\t\t\t\t\tlifetime = this.minLifetime;\r\n\t\t\t\telse\r\n\t\t\t\t\tlifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\r\n\t\t\t\t//only make the particle if it wouldn't immediately destroy itself\r\n\t\t\t\tif(-this._spawnTimer < lifetime)\r\n\t\t\t\t{\r\n\t\t\t\t\t//If the position has changed and this isn't the first spawn,\r\n\t\t\t\t\t//interpolate the spawn position\r\n\t\t\t\t\tlet emitPosX, emitPosY;\r\n\t\t\t\t\tif (this._prevPosIsValid && this._posChanged)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//1 - _spawnTimer / delta, but _spawnTimer is negative\r\n\t\t\t\t\t\tlet lerp = 1 + this._spawnTimer / delta;\r\n\t\t\t\t\t\temitPosX = (curX - prevX) * lerp + prevX;\r\n\t\t\t\t\t\temitPosY = (curY - prevY) * lerp + prevY;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse//otherwise just set to the spawn position\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\temitPosX = curX;\r\n\t\t\t\t\t\temitPosY = curY;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//create enough particles to fill the wave (non-burst types have a wave of 1)\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tfor(let len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//see if we actually spawn one\r\n\t\t\t\t\t\tif (this.spawnChance < 1 && Math.random() >= this.spawnChance)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t//create particle\r\n\t\t\t\t\t\tlet p;\r\n\t\t\t\t\t\tif(this._poolFirst)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp = this._poolFirst;\r\n\t\t\t\t\t\t\tthis._poolFirst = this._poolFirst.next;\r\n\t\t\t\t\t\t\tp.next = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp = new this.particleConstructor(this);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//set a random texture if we have more than one\r\n\t\t\t\t\t\tif(this.particleImages.length > 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//if they are actually the same texture, a standard particle\r\n\t\t\t\t\t\t\t//will quit early from the texture setting in setTexture().\r\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//set up the start and end values\r\n\t\t\t\t\t\tp.alphaList.reset(this.startAlpha);\r\n\t\t\t\t\t\tif(this.minimumSpeedMultiplier != 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp.speedList.reset(this.startSpeed);\r\n\t\t\t\t\t\tp.acceleration.x = this.acceleration.x;\r\n\t\t\t\t\t\tp.acceleration.y = this.acceleration.y;\r\n\t\t\t\t\t\tp.maxSpeed = this.maxSpeed;\r\n\t\t\t\t\t\tif(this.minimumScaleMultiplier != 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp.scaleList.reset(this.startScale);\r\n\t\t\t\t\t\tp.colorList.reset(this.startColor);\r\n\t\t\t\t\t\t//randomize the rotation speed\r\n\t\t\t\t\t\tif(this.minRotationSpeed == this.maxRotationSpeed)\r\n\t\t\t\t\t\t\tp.rotationSpeed = this.minRotationSpeed;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tp.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\r\n\t\t\t\t\t\tp.rotationAcceleration = this.rotationAcceleration;\r\n\t\t\t\t\t\tp.noRotation = this.noRotation;\r\n\t\t\t\t\t\t//set up the lifetime\r\n\t\t\t\t\t\tp.maxLife = lifetime;\r\n\t\t\t\t\t\t//set the blend mode\r\n\t\t\t\t\t\tp.blendMode = this.particleBlendMode;\r\n\t\t\t\t\t\t//set the custom ease, if any\r\n\t\t\t\t\t\tp.ease = this.customEase;\r\n\t\t\t\t\t\t//set the extra data, if any\r\n\t\t\t\t\t\tp.extraData = this.extraData;\r\n\t\t\t\t\t\t//set additional properties to particle\r\n\t\t\t\t\t\tthis.applyAdditionalProperties(p);\r\n\t\t\t\t\t\t//call the proper function to handle rotation and position of particle\r\n\t\t\t\t\t\tthis._spawnFunc(p, emitPosX, emitPosY, i);\r\n\t\t\t\t\t\t//initialize particle\r\n\t\t\t\t\t\tp.init();\r\n\t\t\t\t\t\t//update the particle by the time passed, so the particles are spread out properly\r\n\t\t\t\t\t\tp.update(-this._spawnTimer);//we want a positive delta, because a negative delta messes things up\r\n\t\t\t\t\t\t//add the particle to the display list\r\n\t\t\t\t\t\tif(!p.parent)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (this.addAtBack)\r\n\t\t\t\t\t\t\t\tthis._parent.addChildAt(p, 0);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tthis._parent.addChild(p);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//kind of hacky, but performance friendly\r\n\t\t\t\t\t\t\t//shuffle children to correct place\r\n\t\t\t\t\t\t\tlet children = this._parent.children;\r\n\t\t\t\t\t\t\t//avoid using splice if possible\r\n\t\t\t\t\t\t\tif(children[0] == p)\r\n\t\t\t\t\t\t\t\tchildren.shift();\r\n\t\t\t\t\t\t\telse if(children[children.length-1] == p)\r\n\t\t\t\t\t\t\t\tchildren.pop();\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet index = children.indexOf(p);\r\n\t\t\t\t\t\t\t\tchildren.splice(index, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(this.addAtBack)\r\n\t\t\t\t\t\t\t\tchildren.unshift(p);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tchildren.push(p);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//add particle to list of active particles\r\n\t\t\t\t\t\tif(this._activeParticlesLast)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis._activeParticlesLast.next = p;\r\n\t\t\t\t\t\t\tp.prev = this._activeParticlesLast;\r\n\t\t\t\t\t\t\tthis._activeParticlesLast = p;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis._activeParticlesLast = this._activeParticlesFirst = p;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t++this.particleCount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//increase timer and continue on to any other particles that need to be created\r\n\t\t\t\tthis._spawnTimer += this._frequency;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//if the position changed before this update, then keep track of that\r\n\t\tif(this._posChanged)\r\n\t\t{\r\n\t\t\tthis._prevEmitterPos.x = curX;\r\n\t\t\tthis._prevEmitterPos.y = curY;\r\n\t\t\tthis._prevPosIsValid = true;\r\n\t\t\tthis._posChanged = false;\r\n\t\t}\r\n\r\n\t\t//if we are all done and should destroy ourselves, take care of that\r\n\t\tif (!this._emit && !this._activeParticlesFirst)\r\n\t\t{\r\n\t\t\tif (this._completeCallback)\r\n\t\t\t{\r\n\t\t\t\tconst cb = this._completeCallback;\r\n\t\t\t\tthis._completeCallback = null;\r\n\t\t\t\tcb();\r\n\t\t\t}\r\n\t\t\tif (this._destroyWhenComplete)\r\n\t\t\t{\r\n\t\t\t\tthis.destroy();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set additional properties to new particle.\r\n\t * Using on classes that extend from Emitter\r\n\t * @param p The particle\r\n\t */\r\n\tprotected applyAdditionalProperties(p: Particle) {\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a point type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnPoint(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on\r\n\t\t//starting particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n\t\t//drop the particle at the emitter's position\r\n\t\tp.position.x = emitPosX;\r\n\t\tp.position.y = emitPosY;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a rectangle type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnRect(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on starting\r\n\t\t//particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\r\n\t\t//place the particle at a random point in the rectangle\r\n\t\thelperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\r\n\t\thelperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\r\n\t\tif(this.rotation !== 0)\r\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n\t\tp.position.x = emitPosX + helperPoint.x;\r\n\t\tp.position.y = emitPosY + helperPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a circle type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnCircle(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on starting\r\n\t\t//particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\r\n\t\t//place the particle at a random radius in the circle\r\n\t\thelperPoint.x = Math.random() * this.spawnCircle.radius;\r\n\t\thelperPoint.y = 0;\r\n\t\t//rotate the point to a random angle in the circle\r\n\t\tParticleUtils.rotatePoint(Math.random() * 360, helperPoint);\r\n\t\t//offset by the circle's center\r\n\t\thelperPoint.x += this.spawnCircle.x;\r\n\t\thelperPoint.y += this.spawnCircle.y;\r\n\t\t//rotate the point by the emitter's rotation\r\n\t\tif(this.rotation !== 0)\r\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n\t\t//set the position, offset by the emitter's position\r\n\t\tp.position.x = emitPosX + helperPoint.x;\r\n\t\tp.position.y = emitPosY + helperPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a ring type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnRing(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\tlet spawnCircle = this.spawnCircle;\r\n\t\t//set the initial rotation/direction of the particle based on starting\r\n\t\t//particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\r\n\t\t//place the particle at a random radius in the ring\r\n\t\tif(spawnCircle.minRadius !== spawnCircle.radius)\r\n\t\t{\r\n\t\t\thelperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\r\n\t\t\t\t\t\t\tspawnCircle.minRadius;\r\n\t\t}\r\n\t\telse\r\n\t\t\thelperPoint.x = spawnCircle.radius;\r\n\t\thelperPoint.y = 0;\r\n\t\t//rotate the point to a random angle in the circle\r\n\t\tlet angle = Math.random() * 360;\r\n\t\tp.rotation += angle;\r\n\t\tParticleUtils.rotatePoint(angle, helperPoint);\r\n\t\t//offset by the circle's center\r\n\t\thelperPoint.x += this.spawnCircle.x;\r\n\t\thelperPoint.y += this.spawnCircle.y;\r\n\t\t//rotate the point by the emitter's rotation\r\n\t\tif(this.rotation !== 0)\r\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n\t\t//set the position, offset by the emitter's position\r\n\t\tp.position.x = emitPosX + helperPoint.x;\r\n\t\tp.position.y = emitPosY + helperPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for polygonal chain.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave. Not used for this function.\r\n\t */\r\n\tprotected _spawnPolygonalChain(p: Particle, emitPosX: number, emitPosY: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on starting\r\n\t\t//particle angle and rotation of emitter\r\n\t\tif (this.minStartRotation == this.maxStartRotation)\r\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\r\n\t\telse\r\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\r\n\t\t\t\tthis.minStartRotation + this.rotation;\r\n\t\t// get random point on the polygon chain\r\n\t\tthis.spawnPolygonalChain.getRandomPoint(helperPoint);\r\n\t\t//rotate the point by the emitter's rotation\r\n\t\tif(this.rotation !== 0)\r\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\r\n\t\t//set the position, offset by the emitter's position\r\n\t\tp.position.x = emitPosX + helperPoint.x;\r\n\t\tp.position.y = emitPosY + helperPoint.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions a particle for a burst type emitter.\r\n\t * @param p The particle to position and rotate.\r\n\t * @param emitPosX The emitter's x position\r\n\t * @param emitPosY The emitter's y position\r\n\t * @param i The particle number in the current wave.\r\n\t */\r\n\tprotected _spawnBurst(p: Particle, emitPosX: number, emitPosY: number, i: number)\r\n\t{\r\n\t\t//set the initial rotation/direction of the particle based on spawn\r\n\t\t//angle and rotation of emitter\r\n\t\tif(this.particleSpacing === 0)\r\n\t\t\tp.rotation = Math.random() * 360;\r\n\t\telse\r\n\t\t\tp.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\r\n\t\t//drop the particle at the emitter's position\r\n\t\tp.position.x = emitPosX;\r\n\t\tp.position.y = emitPosY;\r\n\t}\r\n\r\n\t/**\r\n\t * Kills all active particles immediately.\r\n\t */\r\n\tpublic cleanup()\r\n\t{\r\n\t\tlet particle, next;\r\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\r\n\t\t{\r\n\t\t\tnext = particle.next;\r\n\t\t\tthis.recycle(particle);\r\n\t\t\tif(particle.parent)\r\n\t\t\t\tparticle.parent.removeChild(particle);\r\n\t\t}\r\n\t\tthis._activeParticlesFirst = this._activeParticlesLast = null;\r\n\t\tthis.particleCount = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys the emitter and all of its particles.\r\n\t */\r\n\tpublic destroy()\r\n\t{\r\n\t\t//make sure we aren't still listening to any tickers\r\n\t\tthis.autoUpdate = false;\r\n\t\t//puts all active particles in the pool, and removes them from the particle parent\r\n\t\tthis.cleanup();\r\n\t\t//wipe the pool clean\r\n\t\tlet next;\r\n\t\tfor (let particle = this._poolFirst; particle; particle = next)\r\n\t\t{\r\n\t\t\t//store next value so we don't lose it in our destroy call\r\n\t\t\tnext = particle.next;\r\n\t\t\tparticle.destroy();\r\n\t\t}\r\n\t\tthis._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\r\n\t\t\tthis.startColor = this.startScale = this.startAlpha = this.startSpeed =\r\n\t\t\tthis.customEase = this._completeCallback = null;\r\n\t}\r\n}\r\n","import {ParticleUtils} from \"./ParticleUtils\";\r\nimport {Particle} from \"./Particle\";\r\nimport {Emitter} from \"./Emitter\";\r\nimport {Point, Texture} from 'pixi.js-legacy';\r\n\r\n/**\r\n * A helper point for math things.\r\n * @hidden\r\n */\r\nconst helperPoint = new Point();\r\n\r\n/**\r\n * A hand picked list of Math functions (and a couple properties) that are\r\n * allowable. They should be used without the preceding \"Math.\"\r\n * @hidden\r\n */\r\nconst MATH_FUNCS =\r\n[\r\n\t\"pow\",\r\n\t\"sqrt\",\r\n\t\"abs\",\r\n\t\"floor\",\r\n\t\"round\",\r\n\t\"ceil\",\r\n\t\"E\",\r\n\t\"PI\",\r\n\t\"sin\",\r\n\t\"cos\",\r\n\t\"tan\",\r\n\t\"asin\",\r\n\t\"acos\",\r\n\t\"atan\",\r\n\t\"atan2\",\r\n\t\"log\"\r\n];\r\n/**\r\n * create an actual regular expression object from the string\r\n * @hidden\r\n */\r\nconst WHITELISTER = new RegExp(\r\n\t[\r\n\t\t//Allow the 4 basic operations, parentheses and all numbers/decimals, as well\r\n\t\t//as 'x', for the variable usage.\r\n\t\t\"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\r\n\t].concat(MATH_FUNCS).join(\"|\"),\r\n\t\"g\"\r\n);\r\n\r\n/**\r\n * Parses a string into a function for path following.\r\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\r\n * names, and using `new Function()` to generate a function.\r\n * @hidden\r\n * @param pathString The string to parse.\r\n * @return The path function - takes x, outputs y.\r\n */\r\nconst parsePath = function(pathString: string)\r\n{\r\n\tlet matches = pathString.match(WHITELISTER);\r\n\tfor(let i = matches.length - 1; i >= 0; --i)\r\n\t{\r\n\t\tif(MATH_FUNCS.indexOf(matches[i]) >= 0)\r\n\t\t\tmatches[i] = \"Math.\" + matches[i];\r\n\t}\r\n\tpathString = matches.join(\"\");\r\n\treturn new Function(\"x\", \"return \"+ pathString + \";\");\r\n};\r\n\r\n/**\r\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\r\n * \"5x + 3\".\r\n * To use this class, the particle config must have a \"path\" string in the\r\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\r\n * speed settings of the particle). It may have numbers, parentheses, the four basic\r\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\r\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\r\n * \"acos\", \"atan\", \"atan2\", \"log\".\r\n * The overall movement of the particle and the expression value become x and y positions for\r\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\r\n * the particle.\r\n *\r\n * Some example paths:\r\n *\r\n * \t\"sin(x/10) * 20\" // A sine wave path.\r\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\r\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\r\n */\r\nexport class PathParticle extends Particle\r\n{\r\n\t/**\r\n\t * The function representing the path the particle should take.\r\n\t */\r\n\tpublic path: Function;\r\n\t/**\r\n\t * The initial rotation in degrees of the particle, because the direction of the path\r\n\t * is based on that.\r\n\t */\r\n\tpublic initialRotation: number;\r\n\t/**\r\n\t * The initial position of the particle, as all path movement is added to that.\r\n\t */\r\n\tpublic initialPosition: Point;\r\n\t/**\r\n\t * Total single directional movement, due to speed.\r\n\t */\r\n\tpublic movement: number;\r\n\t\r\n\t/**\r\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\r\n\t */\r\n\tconstructor(emitter: Emitter)\r\n\t{\r\n\t\tsuper(emitter);\r\n\t\tthis.path = null;\r\n\t\tthis.initialRotation = 0;\r\n\t\tthis.initialPosition = new Point();\r\n\t\tthis.movement = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tpublic init()\r\n\t{\r\n\t\t//get initial rotation before it is converted to radians\r\n\t\tthis.initialRotation = this.rotation;\r\n\t\t//standard init\r\n\t\tthis.Particle_init();\r\n\r\n\t\t//set the path for the particle\r\n\t\tthis.path = this.extraData.path;\r\n\t\t//cancel the normal movement behavior\r\n\t\tthis._doNormalMovement = !this.path;\r\n\t\t//reset movement\r\n\t\tthis.movement = 0;\r\n\t\t//grab position\r\n\t\tthis.initialPosition.x = this.position.x;\r\n\t\tthis.initialPosition.y = this.position.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tpublic update(delta: number): number\r\n\t{\r\n\t\tconst lerp = this.Particle_update(delta);\r\n\t\t//if the particle died during the update, then don't bother\r\n\t\tif(lerp >= 0 && this.path)\r\n\t\t{\r\n\t\t\t//increase linear movement based on speed\r\n\t\t\tconst speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\r\n\t\t\tthis.movement += speed * delta;\r\n\t\t\t//set up the helper point for rotation\r\n\t\t\thelperPoint.x = this.movement;\r\n\t\t\thelperPoint.y = this.path(this.movement);\r\n\t\t\tParticleUtils.rotatePoint(this.initialRotation, helperPoint);\r\n\t\t\tthis.position.x = this.initialPosition.x + helperPoint.x;\r\n\t\t\tthis.position.y = this.initialPosition.y + helperPoint.y;\r\n\t\t}\r\n\t\treturn lerp;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tpublic destroy()\r\n\t{\r\n\t\tthis.Particle_destroy();\r\n\t\tthis.path = this.initialPosition = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n\t * modifications to prepare it ahead of time. This just runs Particle.parseArt().\r\n\t * @param art The array of art data. For Particle, it should be an array of\r\n\t *            Textures. Any strings in the array will be converted to\r\n\t *            Textures via Texture.fromImage().\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tpublic static parseArt(art: (Texture|string)[]):Texture[]\r\n\t{\r\n\t\treturn Particle.parseArt(art);\r\n\t}\r\n\r\n\t/**\r\n\t * Parses extra emitter data to ensure it is set up for this particle class.\r\n\t * PathParticle checks for the existence of path data, and parses the path data for use\r\n\t * by particle instances.\r\n\t * @param extraData The extra data from the particle config.\r\n\t * @return The parsed extra data.\r\n\t */\r\n\tpublic static parseData(extraData: {path:string})\r\n\t{\r\n\t\tlet output: any = {};\r\n\t\tif(extraData && extraData.path)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\toutput.path = parsePath(extraData.path);\r\n\t\t\t}\r\n\t\t\tcatch(e)\r\n\t\t\t{\r\n\t\t\t\tif(ParticleUtils.verbose)\r\n\t\t\t\t\tconsole.error(\"PathParticle: error in parsing path expression\");\r\n\t\t\t\toutput.path = null;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(ParticleUtils.verbose)\r\n\t\t\t\tconsole.error(\"PathParticle requires a path string in extraData!\");\r\n\t\t\toutput.path = null;\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n}","import {Particle} from \"./Particle\";\r\nimport {Emitter} from \"./Emitter\";\r\nimport {Texture} from 'pixi.js-legacy';\r\n\r\nexport interface ParsedAnimatedParticleArt\r\n{\r\n\ttextures: Texture[];\r\n\tduration: number;\r\n\tframerate: number;\r\n\tloop: boolean;\r\n}\r\n\r\nexport interface AnimatedParticleArt\r\n{\r\n\tframerate: \"matchLife\"|number;\r\n\tloop?: boolean;\r\n\ttextures: (string|Texture|{texture:string|Texture,count:number})[];\r\n}\r\n\r\n/**\r\n * An individual particle image with an animation. Art data passed to the emitter must be\r\n * formatted in a particular way for AnimatedParticle to be able to handle it:\r\n *\r\n * ```typescript\r\n * {\r\n *     //framerate is required. It is the animation speed of the particle in frames per\r\n *     //second.\r\n *     //A value of \"matchLife\" causes the animation to match the lifetime of an individual\r\n *     //particle, instead of at a constant framerate. This causes the animation to play\r\n *     //through one time, completing when the particle expires.\r\n *     framerate: 6,\r\n *     //loop is optional, and defaults to false.\r\n *     loop: true,\r\n *     //textures is required, and can be an array of any (non-zero) length.\r\n *     textures: [\r\n *         //each entry represents a single texture that should be used for one or more\r\n *         //frames. Any strings will be converted to Textures with Texture.fromImage().\r\n *         //Instances of PIXI.Texture will be used directly.\r\n *         \"animFrame1.png\",\r\n *         //entries can be an object with a 'count' property, telling AnimatedParticle to\r\n *         //use that texture for 'count' frames sequentially.\r\n *         {\r\n *             texture: \"animFrame2.png\",\r\n *             count: 3\r\n *         },\r\n *         \"animFrame3.png\"\r\n *     ]\r\n * }\r\n * ```\r\n */\r\nexport class AnimatedParticle extends Particle\r\n{\r\n\t/**\r\n\t * Texture array used as each frame of animation, similarly to how MovieClip works.\r\n\t */\r\n\tprivate textures: Texture[];\r\n\r\n\t/**\r\n\t * Duration of the animation, in seconds.\r\n\t */\r\n\tprivate duration: number;\r\n\r\n\t/**\r\n\t * Animation framerate, in frames per second.\r\n\t */\r\n\tprivate framerate: number;\r\n\r\n\t/**\r\n\t * Animation time elapsed, in seconds.\r\n\t */\r\n\tprivate elapsed: number;\r\n\r\n\t/**\r\n\t * If this particle animation should loop.\r\n\t */\r\n\tprivate loop: boolean;\r\n\t\r\n\t/**\r\n\t * @param emitter The emitter that controls this AnimatedParticle.\r\n\t */\r\n\tconstructor(emitter: Emitter)\r\n\t{\r\n\t\tsuper(emitter);\r\n\r\n\t\tthis.textures = null;\r\n\t\tthis.duration = 0;\r\n\t\tthis.framerate = 0;\r\n\t\tthis.elapsed = 0;\r\n\t\tthis.loop = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the particle for use, based on the properties that have to\r\n\t * have been set already on the particle.\r\n\t */\r\n\tpublic init()\r\n\t{\r\n\t\tthis.Particle_init();\r\n\r\n\t\tthis.elapsed = 0;\r\n\r\n\t\t//if the animation needs to match the particle's life, then cacluate variables\r\n\t\tif(this.framerate < 0)\r\n\t\t{\r\n\t\t\tthis.duration = this.maxLife;\r\n\t\t\tthis.framerate = this.textures.length / this.duration;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the textures for the particle.\r\n\t * @param art An array of PIXI.Texture objects for this animated particle.\r\n\t */\r\n\tpublic applyArt(art: ParsedAnimatedParticleArt)\r\n\t{\r\n\t\tthis.textures = art.textures;\r\n\t\tthis.framerate = art.framerate;\r\n\t\tthis.duration = art.duration;\r\n\t\tthis.loop = art.loop;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the particle.\r\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\r\n\t */\r\n\tpublic update(delta: number): number\r\n\t{\r\n\t\tconst lerp = this.Particle_update(delta);\r\n\t\t//only animate the particle if it is still alive\r\n\t\tif(lerp >= 0)\r\n\t\t{\r\n\t\t\tthis.elapsed += delta;\r\n\t\t\tif(this.elapsed > this.duration)\r\n\t\t\t{\r\n\t\t\t\t//loop elapsed back around\r\n\t\t\t\tif(this.loop)\r\n\t\t\t\t\tthis.elapsed = this.elapsed % this.duration;\r\n\t\t\t\t//subtract a small amount to prevent attempting to go past the end of the animation\r\n\t\t\t\telse\r\n\t\t\t\t\tthis.elapsed = this.duration - 0.000001;\r\n\t\t\t}\r\n\t\t\t// add a very small number to the frame and then floor it to avoid\r\n\t\t\t// the frame being one short due to floating point errors.\r\n\t\t\tlet frame = (this.elapsed * this.framerate + 0.0000001) | 0;\r\n\t\t\tthis.texture = this.textures[frame] || Texture.EMPTY;\r\n\t\t}\r\n\t\treturn lerp;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys the particle, removing references and preventing future use.\r\n\t */\r\n\tpublic destroy()\r\n\t{\r\n\t\tthis.Particle_destroy();\r\n\t\tthis.textures = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\r\n\t * modifications to prepare it ahead of time.\r\n\t * @param art The array of art data, properly formatted for AnimatedParticle.\r\n\t * @return The art, after any needed modifications.\r\n\t */\r\n\tpublic static parseArt(art: AnimatedParticleArt[])\r\n\t{\r\n\t\tlet data, output: any, textures, tex, outTextures;\r\n\t\tlet outArr:ParsedAnimatedParticleArt[] = [];\r\n\t\tfor(let i = 0; i < art.length; ++i)\r\n\t\t{\r\n\t\t\tdata = art[i];\r\n\t\t\toutArr[i] = output = {} as ParsedAnimatedParticleArt;\r\n\t\t\toutput.textures = outTextures = [];\r\n\t\t\ttextures = data.textures;\r\n\t\t\tfor(let j = 0; j < textures.length; ++j)\r\n\t\t\t{\r\n\t\t\t\ttex = textures[j];\r\n\t\t\t\tif(typeof tex == \"string\")\r\n\t\t\t\t\toutTextures.push(Texture.from(tex));\r\n\t\t\t\telse if(tex instanceof Texture)\r\n\t\t\t\t\toutTextures.push(tex);\r\n\t\t\t\t//assume an object with extra data determining duplicate frame data\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlet dupe = tex.count || 1;\r\n\t\t\t\t\tif(typeof tex.texture == \"string\")\r\n\t\t\t\t\t\ttex = Texture.from(tex.texture);\r\n\t\t\t\t\telse// if(tex.texture instanceof Texture)\r\n\t\t\t\t\t\ttex = tex.texture;\r\n\t\t\t\t\tfor(; dupe > 0; --dupe)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\toutTextures.push(tex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//use these values to signify that the animation should match the particle life time.\r\n\t\t\tif(data.framerate == \"matchLife\")\r\n\t\t\t{\r\n\t\t\t\t//-1 means that it should be calculated\r\n\t\t\t\toutput.framerate = -1;\r\n\t\t\t\toutput.duration = 0;\r\n\t\t\t\toutput.loop = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//determine if the animation should loop\r\n\t\t\t\toutput.loop = !!data.loop;\r\n\t\t\t\t//get the framerate, default to 60\r\n\t\t\t\toutput.framerate = data.framerate > 0 ? data.framerate : 60;\r\n\t\t\t\t//determine the duration\r\n\t\t\t\toutput.duration = outTextures.length / output.framerate;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn outArr;\r\n\t}\r\n}"],"names":["ParticleUtils","BLEND_MODES","Point","Texture","Sprite","pixi.Ticker","Rectangle","Circle","settings","helperPoint"],"mappings":"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"}